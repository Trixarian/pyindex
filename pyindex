#!/usr/bin/python
################################################
# Python IRC Indexer version 0.3
# By Brenton Edgar Scott
# Released under the GNU General Public License
################################################
import socket
import sys
import time
import random
import os

# Function to read the conf with comment and empty line support
def readconf(target):
	infile = open("pyindex.conf")
	while infile:
		line = infile.readline()
		if line != "" and "=" in line:
			if target in line:
				line2 = line.split(" = ")
				returnline = ''.join(line2[1])
				break
		if line == "": break
	else: infile.close()

	if returnline: return eval(returnline)

def write_data(filename, sdata):
	file = open("./networks/%s" % filename.lower(), "a")
	file.write(sdata)
	file.close()

def irc_send(msg): irc.send("%s\r\n" % msg)

def irc_quit():
	global running, irc
	irc_send("QUIT :Leaving %s with %s users in %s channels" % (network, current_users, channels))
	time.sleep(1)
	running = False

def index_done():
	ts = int(time.time())
	if not os.path.isfile("./networks/%s" % network.lower()): 
		write_data(network, "NN:%s\nIT:%s\n" % (network, ircd))
	write_data(network, "%d:LS:%s\n%d:TS:%s\n%d:TC:%s\n%d:CU:%s\n%d:TU:%s\n" % (ts, server, ts, servers, ts, channels, ts, current_users, ts, total_users))
	irc_quit()

# I hate those : in lines >.<
def irc_clean(msg):	
	return msg.rstrip().replace(":","").split()

def irc_parser(msg):
	global server, network, ircd, servers, channels, current_users, total_users
	sync_done = False

	# Keeps us online
	if msg[0] == "PING": irc_send("PONG %s" % msg[1])

	# Server Address and Network Name
	if msg[1] == "001":
		try: 
			server = msg[0]
			network = msg[6]
		except:
			server = "Unknown"
			network = "Unknown"

	if msg[1] == "004":
		try: ircd = msg[4]
		except: ircd = "Unknown"

	# Number of servers the network has
	if msg[1] == "251":
		try: servers = int(msg[11])
		except: servers = 0

	# Number of channels on the network
	if msg[1] == "254":
		try: channels = int(msg[3])
		except: channels = 0

	# Current & total number of users on the network - We'll trust that the servers aren't lying...
	if msg[1] == "266":
		# Ratbox based IRCd support
		if msg[5] == "Current":
			try: 
				current_users = int(msg[3])
				total_users = int(msg[4])
			except: 
				current_users = 0
				total_users = 0
		else:
			try: 
				current_users = int(msg[6])
				total_users = int(msg[8])
			except: 
				current_users = 0
				total_users = 0
		sync_done = True

	if sync_done:
		# We've collected all we can. Now let's write our data and exit ;)
		index_done()

################
# Main Program #
################
running = True

if (len(sys.argv) > 1):
	IRC_SERVER = sys.argv[1]
	IRC_PORT = int(6667)
	IRC_NICK = readconf("NICK")
	NICK_NUM = random.randint(1, 999)
	IRC_NICK = "%s%d" % (IRC_NICK, NICK_NUM)
	IRC_IDENT = readconf("IDENT")
	IRC_REALNAME = readconf("REALNAME")
	irc_buffer = ""

	irc=socket.socket()
	irc.connect((IRC_SERVER, IRC_PORT))
	irc_send("NICK %s" % IRC_NICK)
	irc_send("USER %s %s 0 :%s" % (IRC_IDENT, IRC_SERVER, IRC_REALNAME))

	while running:
		irc_buffer = irc_buffer + irc.recv(1024)
		irc_temp = irc_buffer.split("\n")
		irc_buffer = irc_temp.pop()

		for irc_line in irc_temp:
			irc_parser(irc_clean(irc_line))

	else: irc.close()
else: print "Error: Please provide a server to index!"